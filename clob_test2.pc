/*
 ============================================================================
 Name        : clob_test2.pc
 Author      : kys
 Version     :
 Copyright   : Your copyright notice
 Description : Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <oratypes.h>

#ifndef SQLCA_ORACLE
# include <sqlca.h>
#endif /* SQLCA_ORACLE */

#ifndef OCI_ORACLE
# include <oci.h>
#endif /* OCI_ORACLE */

/***********
* Defines *
***********/
#define EX_SUCCESS 0
#define EX_FAILURE 1
#define SSS_LENGTH 12
#define NAME_LENGTH 50 /* corresponds with max length of name in table */
#define BUFLEN 1024
#define MAXCRIME 5
#define DATELENGTH 12
#define INIT_LEN 50
#define READ_SIZE 60

void ora_connect(void);
void sql_error(char *);
void GetRecord( void );
void UpdRecord( void );
void do_insert();
ub4 read_file(char *, OCIClobLocator *);

typedef struct {short len; char arr[READ_SIZE];} vr;

typedef struct long_varraw {
	ub4 len;
	text buf[1];
} long_varraw;


// 오라클 오류를 출력해주는 함수
void sql_error(char *msg) 
{ 
	char err_msg[512];
	size_t buf_len, msg_len;
	
	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\n%s\n", msg);
	
	/* Call sqlglm() to get the complete text of the
	 * error message.
	 */
	buf_len = sizeof (err_msg);
	sqlglm(err_msg, &buf_len, &msg_len);
	printf("%.*s\n", msg_len, err_msg);
	
	EXEC SQL ROLLBACK ;
	exit(EXIT_FAILURE);
} 

void str_lower(char *str)
{
	int i;

	for (i=0; i < strlen(str); i++)
	{
		*(str+i) = (char)tolower((char) *(str+i));
	}

}

void ora_connect()
{
	EXEC SQL BEGIN DECLARE SECTION;

	varchar userid[INIT_LEN], passwd[INIT_LEN], tnsname[INIT_LEN];
	
	EXEC SQL END DECLARE SECTION;

	if (getenv("ORA_USER") == NULL)
	{
		printf("환경변수를 확인하기 바랍니다.\n");
		exit(EXIT_FAILURE);
	}

	strcpy(userid.arr,getenv("ORA_USER"));
	userid.len = strlen(getenv("ORA_USER"));
	userid.arr[userid.len]= '\0';

	strcpy(passwd.arr, getenv("ORA_PASS"));
	passwd.len = strlen(getenv("ORA_PASS"));
	passwd.arr[passwd.len] = '\0';
	
	strcpy(tnsname.arr, getenv("ORA_TNS"));
	tnsname.len = strlen(getenv("ORA_TNS"));
	tnsname.arr[tnsname.len] = '\0';

	str_lower(userid.arr);
	str_lower(passwd.arr);
	str_lower(tnsname.arr);
	
//	printf("userid = [%s], passwd = [%s], tnsname = [%s] \n", userid.arr, passwd.arr, tnsname.arr);

	EXEC SQL WHENEVER SQLERROR DO sql_error("ora_connect(): ORACLE CONNECT ERROR ");

	EXEC SQL connect :userid identified by :passwd using :tnsname;
	
	printf("오라클 DB 연결 성공 \n");

}

int main()
{

	ora_connect();

	printf("\t*******************************\n");
	printf("\t* Welcome to the DMV Database *\n");
	printf("\t*******************************\n\n");

//	GetRecord();
//	UpdRecord();

	do_insert();


	EXEC SQL COMMIT RELEASE;
	return (EX_SUCCESS);
}

void GetRecord()
{

	char sss[SSS_LENGTH]="670709111";
	long amount;

	varchar my_vr[READ_SIZE];

	
	OCIClobLocator *license_txt;
	char name[NAME_LENGTH]={'\0'};

	EXEC SQL WHENEVER SQLERROR DO sql_error("GetRecord(): ORACLE ERROR ");


	printf("========================================================\n\n");
	printf("SSS: %s\n", sss);

	EXEC SQL ALLOCATE :license_txt;

	EXEC SQL DECLARE C1 CURSOR FOR 
		SELECT txt_summary
		FROM license_table where sss = :sss;

	EXEC SQL OPEN C1;
	
	EXEC SQL WHENEVER NOT FOUND DO break;

	while (1)
	{
		EXEC SQL FETCH C1 INTO :license_txt;
		
		EXEC SQL LOB OPEN :license_txt READ ONLY;
		amount = 0;
		my_vr.len = READ_SIZE;

		EXEC SQL WHENEVER NOT FOUND DO break;
		while(1)
		{
			EXEC SQL LOB READ :amount
				FROM :license_txt INTO :my_vr;

			printf("%.*s", my_vr.len, my_vr.arr);
		}
		printf("%.*s", my_vr.len, my_vr.arr);
		
		EXEC SQL LOB CLOSE :license_txt;
	}
	
	EXEC SQL FREE :license_txt;
	EXEC SQL CLOSE C1;
	
	printf("\n\n========================================================\n");

}

void UpdRecord()
{

	OCIClobLocator *license_txt;
	char crimebuf[200] = "Impersonating An Oracle Employee - 10 Jan 1997 ";
	varchar *in_buf;
	int amt, read_amt = 50;
	int nbytes;
	int offset = 1;
	int remainder;
	boolean last = FALSE;
	char sss[SSS_LENGTH]="670709111";
	
	in_buf = (varchar *)malloc(sizeof(crimebuf) * 10);
	
	strcpy(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
/*
	strcat(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
	strcat(in_buf->arr, crimebuf);
*/
	in_buf->len = strlen(in_buf->arr);
	in_buf->arr[in_buf->len] = '\0';

	amt = in_buf->len;
	remainder = amt;
printf("[%d]",remainder);


	EXEC SQL WHENEVER SQLERROR DO sql_error("UpdRecord(): ORACLE ERROR ");

	EXEC SQL ALLOCATE :license_txt;

	while(1)
	{

		EXEC SQL SELECT txt_summary INTO :license_txt FROM license_table
		WHERE sss = :sss FOR UPDATE;
		
		if (amt <= read_amt)
		{
			// 읽기 버퍼 사이즈보다 작은 경우에는 한꺼번에 write한다
			EXEC SQL LOB WRITE ONE :amt FROM :in_buf INTO :license_txt ;
		}
		else 
		{
			// 최초 쓰는 경우
			EXEC SQL LOB WRITE FIRST :read_amt FROM :in_buf 
				INTO :license_txt AT :offset;

			remainder = remainder - read_amt;
			printf("[%d]",remainder);
			do 
			{
				if (remainder <= read_amt)
					last = TRUE;
			
				if (last)
				{
					// 마지막인 경우
//					EXEC SQL LOB WRITE LAST :read_amt FROM :in_buf 
//						INTO :license_txt;
			printf("[%d]",remainder);

				}
				else
				{
					
//					EXEC SQL LOB WRITE NEXT :read_amt FROM :in_buf 
//						INTO :license_txt;
			printf("[%d]",remainder);
				
				}
				remainder = remainder - read_amt;
			
			}while(!last);
		
		
		} //end if
		break;

	} // end while

	EXEC SQL FREE :license_txt;
	free(in_buf);
	
	EXEC SQL COMMIT;
	
	printf(" Insert success \n");

}

void do_insert()
{
	OCIClobLocator *clob;
	ub4 loclen, fillen;
	
	char name[30]="KYS";
	char file[100];
	varchar key[100];
	
	strcpy(file,"./test.pc");

	strcpy(key.arr,"670709112");
	key.len = strlen(key.arr);
	key.arr[key.len] = '\0';


	EXEC SQL ALLOCATE :clob;
	EXEC SQL WHENEVER SQLERROR DO sql_error("do_insert():INSERT/SELECT");
	EXEC SQL SAVEPOINT PREINSERT;

	while(1)
	{

		EXEC SQL INSERT
			INTO license_table (sss, name, txt_summary) VALUES (:key, :name, '1');

		EXEC SQL SELECT txt_summary INTO :clob
			FROM license_table WHERE sss = :key FOR UPDATE;
		printf("Inserting file '%s' under key '%.*s'...\n", file, key.len, key.arr);
	
		fillen = read_file(file, clob);
		EXEC SQL LOB DESCRIBE :clob GET LENGTH INTO :loclen;
		if ((fillen == 0) || (fillen != loclen))
		{
			printf("Problem reading file '%s'\n", file);
			EXEC SQL ROLLBACK TO SAVEPOINT PREINSERT;
			EXEC SQL FREE :clob;
			return;
		}
	
		EXEC SQL WHENEVER SQLERROR DO sql_error("do_insert():UPDATE");
		EXEC SQL UPDATE license_table
			SET  txt_summary = :clob WHERE sss = :key;

		break;
	}	

	EXEC SQL FREE :clob;
	EXEC SQL COMMIT;

	printf("Inserted.\n");
}


ub4 read_file(filename, clob)
char *filename;
OCIClobLocator *clob;
{
	varchar *lvr;
	ub4 bufsize;
	ub4 amt;
	ub4 filelen, remainder, nbytes;
	ub4 offset = 1;
	boolean last = FALSE;
	FILE *in_fd;

	/* Open the file for reading. */
	in_fd = fopen(filename, "r");
	if (in_fd == (FILE *)0)
	return (ub4)0;

	/* Determine Total File Length - Total Amount to Write to CLOB */
	(void) fseek(in_fd, 0L, SEEK_END);
	amt = filelen = (ub4)ftell(in_fd);

	/* Determine the Buffer Size and Allocate the varchar Object */
	bufsize = 1024;
	lvr = (varchar *)malloc(sizeof(ub4) + bufsize);
	nbytes = (filelen > bufsize) ? bufsize : filelen;

	/* Reset the File Pointer and Perform the Initial Read */
	(void) fseek(in_fd, 0L, SEEK_SET);
	lvr->len = fread((void *)lvr->arr, (size_t)1, (size_t)nbytes, in_fd);
	remainder = filelen - nbytes;


	EXEC SQL WHENEVER SQLERROR DO sql_error("read_file():WRITE");
	if (remainder == 0)
	{
		/* Write the CLOB in a Single Piece */
		EXEC SQL LOB WRITE ONE :amt
		FROM :lvr INTO :clob AT :offset;
	}
	else
	{
		/* Write the CLOB in Multiple Pieces using Standard Polling */
		EXEC SQL LOB WRITE FIRST :amt
		FROM :lvr INTO :clob AT :offset;
		do 
		{
			if (remainder > bufsize)
				nbytes = bufsize;
			else
			{
				nbytes = remainder;
				last = TRUE;
			}
			if ((lvr->len = fread(
			(void *)lvr->arr, (size_t)1, (size_t)nbytes, in_fd)) != nbytes)
				last = TRUE;
			if (last)
			{
				/* Write the Final Piece */
				EXEC SQL LOB WRITE LAST :amt
				FROM :lvr INTO :clob;
			}
			else
			{
				/* Write an Interim Piece - Still More to Write */
				EXEC SQL LOB WRITE NEXT :amt
				FROM :lvr INTO :clob;
			}

			remainder -= nbytes;
		} while (!last && !feof(in_fd));
	}
	/* Close the file, and return the total file size. */
	fclose(in_fd);
	free(lvr);

	return filelen;
}
